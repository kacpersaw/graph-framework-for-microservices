// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/registration-service/global/global.pb.go

// Package mock_global is a generated GoMock package.
package mock_global

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	global "gitlab.eng.vmware.com/nsx-allspark_users/go-protos/pkg/registration-service/global"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockGlobalRegistrationClient is a mock of GlobalRegistrationClient interface.
type MockGlobalRegistrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRegistrationClientMockRecorder
}

// MockGlobalRegistrationClientMockRecorder is the mock recorder for MockGlobalRegistrationClient.
type MockGlobalRegistrationClientMockRecorder struct {
	mock *MockGlobalRegistrationClient
}

// NewMockGlobalRegistrationClient creates a new mock instance.
func NewMockGlobalRegistrationClient(ctrl *gomock.Controller) *MockGlobalRegistrationClient {
	mock := &MockGlobalRegistrationClient{ctrl: ctrl}
	mock.recorder = &MockGlobalRegistrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRegistrationClient) EXPECT() *MockGlobalRegistrationClientMockRecorder {
	return m.recorder
}

// AddAuthIntegration mocks base method.
func (m *MockGlobalRegistrationClient) AddAuthIntegration(ctx context.Context, in *global.AuthIntegrationRequest, opts ...grpc.CallOption) (*global.AuthIntegrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAuthIntegration", varargs...)
	ret0, _ := ret[0].(*global.AuthIntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthIntegration indicates an expected call of AddAuthIntegration.
func (mr *MockGlobalRegistrationClientMockRecorder) AddAuthIntegration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthIntegration", reflect.TypeOf((*MockGlobalRegistrationClient)(nil).AddAuthIntegration), varargs...)
}

// GetTenantRegistrationStatus mocks base method.
func (m *MockGlobalRegistrationClient) GetTenantRegistrationStatus(ctx context.Context, in *global.TenantRegistrationStatusRequest, opts ...grpc.CallOption) (*global.TenantRegistrationStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTenantRegistrationStatus", varargs...)
	ret0, _ := ret[0].(*global.TenantRegistrationStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantRegistrationStatus indicates an expected call of GetTenantRegistrationStatus.
func (mr *MockGlobalRegistrationClientMockRecorder) GetTenantRegistrationStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantRegistrationStatus", reflect.TypeOf((*MockGlobalRegistrationClient)(nil).GetTenantRegistrationStatus), varargs...)
}

// RegisterTenant mocks base method.
func (m *MockGlobalRegistrationClient) RegisterTenant(ctx context.Context, in *global.TenantRequest, opts ...grpc.CallOption) (*global.TenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTenant", varargs...)
	ret0, _ := ret[0].(*global.TenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTenant indicates an expected call of RegisterTenant.
func (mr *MockGlobalRegistrationClientMockRecorder) RegisterTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTenant", reflect.TypeOf((*MockGlobalRegistrationClient)(nil).RegisterTenant), varargs...)
}

// RemoveAuthIntegration mocks base method.
func (m *MockGlobalRegistrationClient) RemoveAuthIntegration(ctx context.Context, in *global.AuthIntegrationRequest, opts ...grpc.CallOption) (*global.AuthIntegrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAuthIntegration", varargs...)
	ret0, _ := ret[0].(*global.AuthIntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAuthIntegration indicates an expected call of RemoveAuthIntegration.
func (mr *MockGlobalRegistrationClientMockRecorder) RemoveAuthIntegration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAuthIntegration", reflect.TypeOf((*MockGlobalRegistrationClient)(nil).RemoveAuthIntegration), varargs...)
}

// UnregisterTenant mocks base method.
func (m *MockGlobalRegistrationClient) UnregisterTenant(ctx context.Context, in *global.TenantRequest, opts ...grpc.CallOption) (*global.TenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterTenant", varargs...)
	ret0, _ := ret[0].(*global.TenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTenant indicates an expected call of UnregisterTenant.
func (mr *MockGlobalRegistrationClientMockRecorder) UnregisterTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTenant", reflect.TypeOf((*MockGlobalRegistrationClient)(nil).UnregisterTenant), varargs...)
}

// MockGlobalRegistrationServer is a mock of GlobalRegistrationServer interface.
type MockGlobalRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRegistrationServerMockRecorder
}

// MockGlobalRegistrationServerMockRecorder is the mock recorder for MockGlobalRegistrationServer.
type MockGlobalRegistrationServerMockRecorder struct {
	mock *MockGlobalRegistrationServer
}

// NewMockGlobalRegistrationServer creates a new mock instance.
func NewMockGlobalRegistrationServer(ctrl *gomock.Controller) *MockGlobalRegistrationServer {
	mock := &MockGlobalRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockGlobalRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRegistrationServer) EXPECT() *MockGlobalRegistrationServerMockRecorder {
	return m.recorder
}

// AddAuthIntegration mocks base method.
func (m *MockGlobalRegistrationServer) AddAuthIntegration(arg0 context.Context, arg1 *global.AuthIntegrationRequest) (*global.AuthIntegrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthIntegration", arg0, arg1)
	ret0, _ := ret[0].(*global.AuthIntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthIntegration indicates an expected call of AddAuthIntegration.
func (mr *MockGlobalRegistrationServerMockRecorder) AddAuthIntegration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthIntegration", reflect.TypeOf((*MockGlobalRegistrationServer)(nil).AddAuthIntegration), arg0, arg1)
}

// GetTenantRegistrationStatus mocks base method.
func (m *MockGlobalRegistrationServer) GetTenantRegistrationStatus(arg0 context.Context, arg1 *global.TenantRegistrationStatusRequest) (*global.TenantRegistrationStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantRegistrationStatus", arg0, arg1)
	ret0, _ := ret[0].(*global.TenantRegistrationStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantRegistrationStatus indicates an expected call of GetTenantRegistrationStatus.
func (mr *MockGlobalRegistrationServerMockRecorder) GetTenantRegistrationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantRegistrationStatus", reflect.TypeOf((*MockGlobalRegistrationServer)(nil).GetTenantRegistrationStatus), arg0, arg1)
}

// RegisterTenant mocks base method.
func (m *MockGlobalRegistrationServer) RegisterTenant(arg0 context.Context, arg1 *global.TenantRequest) (*global.TenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTenant", arg0, arg1)
	ret0, _ := ret[0].(*global.TenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTenant indicates an expected call of RegisterTenant.
func (mr *MockGlobalRegistrationServerMockRecorder) RegisterTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTenant", reflect.TypeOf((*MockGlobalRegistrationServer)(nil).RegisterTenant), arg0, arg1)
}

// RemoveAuthIntegration mocks base method.
func (m *MockGlobalRegistrationServer) RemoveAuthIntegration(arg0 context.Context, arg1 *global.AuthIntegrationRequest) (*global.AuthIntegrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAuthIntegration", arg0, arg1)
	ret0, _ := ret[0].(*global.AuthIntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAuthIntegration indicates an expected call of RemoveAuthIntegration.
func (mr *MockGlobalRegistrationServerMockRecorder) RemoveAuthIntegration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAuthIntegration", reflect.TypeOf((*MockGlobalRegistrationServer)(nil).RemoveAuthIntegration), arg0, arg1)
}

// UnregisterTenant mocks base method.
func (m *MockGlobalRegistrationServer) UnregisterTenant(arg0 context.Context, arg1 *global.TenantRequest) (*global.TenantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTenant", arg0, arg1)
	ret0, _ := ret[0].(*global.TenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTenant indicates an expected call of UnregisterTenant.
func (mr *MockGlobalRegistrationServerMockRecorder) UnregisterTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTenant", reflect.TypeOf((*MockGlobalRegistrationServer)(nil).UnregisterTenant), arg0, arg1)
}
