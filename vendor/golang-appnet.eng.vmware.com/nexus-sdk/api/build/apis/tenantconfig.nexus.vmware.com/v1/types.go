// Code generated by nexus. DO NOT EDIT.

package v1

import (
	commonnexusvmwarecomv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/apis/common.nexus.vmware.com/v1"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"golang-appnet.eng.vmware.com/nexus-sdk/api/build/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Tenant struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TenantSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TenantNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TenantNexusStatus struct {
	Status TenantStatus `json:"status,omitempty" yaml:"status,omitempty"`
	Nexus  NexusStatus  `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Tenant) CRDName() string {
	return "tenants.tenantconfig.nexus.vmware.com"
}

func (c *Tenant) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TenantSpec struct {
	Name              string   `json:"name"`
	DNSSuffix         string   `json:"dns_suffix,omitempty"`
	SkipSaasTlsVerify bool     `json:"skip_saas_tls_verify,omitempty"`
	InstallTenant     bool     `json:"install_tenant,omitempty"`
	InstallClient     bool     `json:"install_client,omitempty"`
	OrderId           string   `json:"order_id,omitempty"`
	Skus              []string `json:"skus"`
	FeatureFlags      []string `json:"feature_flags,omitempty"`
	Labels            []Label  `json:"labels,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TenantList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Tenant `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Policy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Policy) CRDName() string {
	return "policies.tenantconfig.nexus.vmware.com"
}

func (c *Policy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PolicySpec struct {
	StaticApplications          []commonnexusvmwarecomv1.Application `json:"static_applications,omitempty"`
	PinApplications             []commonnexusvmwarecomv1.Application `json:"pin_applications,omitempty"`
	DynamicAppSchedulingDisable bool                                 `json:"dynamic_app_scheduling_disable,omitempty"`
	DisableProvisioning         bool                                 `json:"disable_provisioning,omitempty"`
	DisableAutoScaling          bool                                 `json:"disable_auto_scaling,omitempty"`
	DisableAppClusterOnboarding bool                                 `json:"disable_app_cluster_onboarding,omitempty"`
	DisableUpgrade              bool                                 `json:"disable_upgrade,omitempty"`
	OnFailureDowngrade          bool                                 `json:"on_failure_downgrade,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Policy `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type Label struct {
	Key   string `json:"key" yaml:"key"`
	Value string `json:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type Provisioning struct {
	Status  string `json:"status,omitempty" yaml:"status"`
	Message string `json:"message,omitempty" yaml:"message"`
}

// +k8s:openapi-gen=true
type TenantStatus struct {
	Provisioning Provisioning `json:"provisioning,omitempty" yaml:"provisioning"`
}
