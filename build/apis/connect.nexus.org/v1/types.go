// Code generated by nexus. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"golang-appnet.eng.vmware.com/nexus-sdk/api/build/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Connect struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ConnectSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ConnectNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ConnectNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Connect) CRDName() string {
	return "connects.connect.nexus.org"
}

func (c *Connect) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ConnectSpec struct {
	EndpointsGvk         map[string]Child `json:"endpointsGvk,omitempty" yaml:"endpointsGvk,omitempty" nexus:"child"`
	ReplicationConfigGvk map[string]Child `json:"replicationConfigGvk,omitempty" yaml:"replicationConfigGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ConnectList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Connect `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NexusEndpoint struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NexusEndpointSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NexusEndpointNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NexusEndpointNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NexusEndpoint) CRDName() string {
	return "nexusendpoints.connect.nexus.org"
}

func (c *NexusEndpoint) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NexusEndpointSpec struct {
	Host string `json:"host" yaml:"host"`
	Port string `json:"port" yaml:"port"`
	Cert string `json:"cert,omitempty"`
	Path string `json:"path,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NexusEndpointList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NexusEndpoint `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ReplicationConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ReplicationConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ReplicationConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ReplicationConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ReplicationConfig) CRDName() string {
	return "replicationconfigs.connect.nexus.org"
}

func (c *ReplicationConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ReplicationConfigSpec struct {
	AccessToken       string                    `json:"accessToken" yaml:"accessToken"`
	Source            ReplicationSource         `json:"source" yaml:"source"`
	Destination       ReplicationDestination    `json:"destination" yaml:"destination"`
	StatusEndpoint    ReplicationStatusEndpoint `json:"statusEndpoint,omitempty"`
	RemoteEndpointGvk *Link                     `json:"remoteEndpointGvk,omitempty" yaml:"remoteEndpointGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ReplicationConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ReplicationConfig `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type KVP struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// +k8s:openapi-gen=true
type Hierarchy struct {
	Labels []KVP `json:"labels"`
}

// +k8s:openapi-gen=true
type ObjectType struct {
	Group   string `json:"group"`
	Kind    string `json:"kind"`
	Version string `json:"version"`
}

// +k8s:openapi-gen=true
type SourceObject struct {
	ObjectType   `json:"objectType"`
	Name         string    `json:"name"`
	Hierarchical bool      `json:"hierarchical"`
	Hierarchy    Hierarchy `json:"hierarchy,omitempty"`
}

// +k8s:openapi-gen=true
type ReplicationSource struct {
	Kind   SourceKind   `json:"kind"`
	Type   ObjectType   `json:"type,omitempty"`
	Object SourceObject `json:"object,omitempty"`
}

// +k8s:openapi-gen=true
type ReplicationDestination struct {
	Hierarchical bool      `json:"hierarchical"`
	Hierarchy    Hierarchy `json:"hierarchy,omitempty"`
	Namespace    string    `json:"namespace,omitempty"`
	ObjectType   `json:"objectType,omitempty"`
}

type ReplicationStatusEndpoint string
type SourceKind string

const (
	Source      ReplicationStatusEndpoint = "Source"
	Destination ReplicationStatusEndpoint = "Destination"
	Object      SourceKind                = "Object"
	Type        SourceKind                = "Type"
)
