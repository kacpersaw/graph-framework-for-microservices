// Code generated by nexus. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"golang-appnet.eng.vmware.com/nexus-sdk/api/build/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Connect struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ConnectSpec `json:"spec,omitempty" yaml:"spec,omitempty"`
}

func (c *Connect) CRDName() string {
	return "connects.connect.nexus.org"
}

func (c *Connect) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ConnectSpec struct {
	EndpointsGvk         map[string]Child `json:"endpointsGvk,omitempty" yaml:"endpointsGvk,omitempty" nexus:"child"`
	ReplicationConfigGvk map[string]Child `json:"replicationConfigGvk,omitempty" yaml:"replicationConfigGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ConnectList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Connect `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NexusEndpoint struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NexusEndpointSpec `json:"spec,omitempty" yaml:"spec,omitempty"`
}

func (c *NexusEndpoint) CRDName() string {
	return "nexusendpoints.connect.nexus.org"
}

func (c *NexusEndpoint) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NexusEndpointSpec struct {
	Host string `json:"host" yaml:"host"`
	Port string `json:"port" yaml:"port"`
	Cert string `json:"cert" yaml:"cert"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NexusEndpointList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NexusEndpoint `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ReplicationConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ReplicationConfigSpec `json:"spec,omitempty" yaml:"spec,omitempty"`
}

func (c *ReplicationConfig) CRDName() string {
	return "replicationconfigs.connect.nexus.org"
}

func (c *ReplicationConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ReplicationConfigSpec struct {
	AccessToken       string `json:"accessToken" yaml:"accessToken"`
	SourceGvk         *Child `json:"sourceGvk,omitempty" yaml:"sourceGvk,omitempty" nexus:"child"`
	DestinationGvk    *Child `json:"destinationGvk,omitempty" yaml:"destinationGvk,omitempty" nexus:"child"`
	RemoteEndpointGvk *Link  `json:"remoteEndpointGvk,omitempty" yaml:"remoteEndpointGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ReplicationConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ReplicationConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ReplicationObject struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ReplicationObjectSpec `json:"spec,omitempty" yaml:"spec,omitempty"`
}

func (c *ReplicationObject) CRDName() string {
	return "replicationobjects.connect.nexus.org"
}

func (c *ReplicationObject) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ReplicationObjectSpec struct {
	Group        string    `json:"group" yaml:"group"`
	Kind         string    `json:"kind" yaml:"kind"`
	Name         string    `json:"name" yaml:"name"`
	LocalRuntime bool      `json:"localRuntime" yaml:"localRuntime"`
	Hierarchical bool      `json:"hierarchical" yaml:"hierarchical"`
	Hierarchy    Hierarchy `json:"hierarchy" yaml:"hierarchy"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ReplicationObjectList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ReplicationObject `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type Hierarchy struct {
	Path string
}
