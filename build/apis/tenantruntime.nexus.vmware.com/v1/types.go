// Code generated by nexus. DO NOT EDIT.

package v1

import (
	commonnexusvmwarecomv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/apis/common.nexus.vmware.com/v1"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"golang-appnet.eng.vmware.com/nexus-sdk/api/build/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Tenant struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TenantSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TenantNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TenantNexusStatus struct {
	AppStatus TenantStatus `json:"appStatus,omitempty" yaml:"appStatus,omitempty"`
	Nexus     NexusStatus  `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Tenant) CRDName() string {
	return "tenants.tenantruntime.nexus.vmware.com"
}

func (c *Tenant) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TenantSpec struct {
	Namespace               string     `json:"namespace,omitempty"`
	TenantName              string     `json:"tenantName"`
	Attributes              Attributes `json:"attributes,omitempty"`
	SaasDomainName          string     `json:"saasDomainName,omitempty"`
	SaasApiDomainName       string     `json:"saasApiDomainName,omitempty"`
	M7Enabled               string     `json:"m7Enabled,omitempty"`
	LicenseType             string     `json:"licenseType,omitempty"`
	StreamName              string     `json:"streamName,omitempty"`
	AwsS3Bucket             string     `json:"awsS3Bucket,omitempty"`
	AwsKmsKeyId             string     `json:"awsKmsKeyId,omitempty"`
	M7InstallationScheduled string     `json:"m7InstallationScheduled,omitempty"`
	ReleaseVersion          string     `json:"releaseVersion,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TenantList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Tenant `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type Cloud struct {
	Provider string `json:"provider,omitempty" yaml:"provider"`
	Region   string `json:"region,omitempty" yaml:"region"`
	Zone     string `json:"zone,omitempty" yaml:"zone"`
}

// +k8s:openapi-gen=true
type Attributes struct {
	Skus []string `json:"skus" yaml:"skus"`
}

// +k8s:openapi-gen=true
type Health struct {
	Healthy                  bool   `json:"healthy,omitempty" yaml:"healthy"`
	LasHealthCheckTimestamp  string `json:"last_health_check_timestamp,omitempty" yaml:"lasHealthCheckTimestamp"`
	NextHealthCheckTimestamp string `json:"next_health_check_timestamp,omitempty" yaml:"nextHealthCheckTimestamp"`
	Message                  string `json:"message,omitempty" yaml:"message"`
}

// +k8s:openapi-gen=true
type TenantStatus struct {
	InstalledApplications commonnexusvmwarecomv1.ApplicationStatus `json:"installedApplications,omitempty" yaml:"installedApplications"`
	ReleaseVersion        string                                   `json:"releaseVersion,omitempty" yaml:"releaseVersion"`
	ReleaseStatus         string                                   `json:"releaseStatus,omitempty" yaml:"releaseStatus"`
	PreviousRelease       string                                   `json:"previousRelease,omitempty" yaml:"previousRelease"`
}
