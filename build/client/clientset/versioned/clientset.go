/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	apisnexusv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/client/clientset/versioned/typed/apis.nexus.org/v1"
	authenticationnexusv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/client/clientset/versioned/typed/authentication.nexus.org/v1"
	confignexusv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/client/clientset/versioned/typed/config.nexus.org/v1"
	connectnexusv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/client/clientset/versioned/typed/connect.nexus.org/v1"
	extensionsnexusv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/client/clientset/versioned/typed/extensions.nexus.org/v1"
	gatewaynexusv1 "golang-appnet.eng.vmware.com/nexus-sdk/api/build/client/clientset/versioned/typed/gateway.nexus.org/v1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ApisNexusV1() apisnexusv1.ApisNexusV1Interface
	AuthenticationNexusV1() authenticationnexusv1.AuthenticationNexusV1Interface
	ConfigNexusV1() confignexusv1.ConfigNexusV1Interface
	ConnectNexusV1() connectnexusv1.ConnectNexusV1Interface
	ExtensionsNexusV1() extensionsnexusv1.ExtensionsNexusV1Interface
	GatewayNexusV1() gatewaynexusv1.GatewayNexusV1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	apisNexusV1           *apisnexusv1.ApisNexusV1Client
	authenticationNexusV1 *authenticationnexusv1.AuthenticationNexusV1Client
	configNexusV1         *confignexusv1.ConfigNexusV1Client
	connectNexusV1        *connectnexusv1.ConnectNexusV1Client
	extensionsNexusV1     *extensionsnexusv1.ExtensionsNexusV1Client
	gatewayNexusV1        *gatewaynexusv1.GatewayNexusV1Client
}

// ApisNexusV1 retrieves the ApisNexusV1Client
func (c *Clientset) ApisNexusV1() apisnexusv1.ApisNexusV1Interface {
	return c.apisNexusV1
}

// AuthenticationNexusV1 retrieves the AuthenticationNexusV1Client
func (c *Clientset) AuthenticationNexusV1() authenticationnexusv1.AuthenticationNexusV1Interface {
	return c.authenticationNexusV1
}

// ConfigNexusV1 retrieves the ConfigNexusV1Client
func (c *Clientset) ConfigNexusV1() confignexusv1.ConfigNexusV1Interface {
	return c.configNexusV1
}

// ConnectNexusV1 retrieves the ConnectNexusV1Client
func (c *Clientset) ConnectNexusV1() connectnexusv1.ConnectNexusV1Interface {
	return c.connectNexusV1
}

// ExtensionsNexusV1 retrieves the ExtensionsNexusV1Client
func (c *Clientset) ExtensionsNexusV1() extensionsnexusv1.ExtensionsNexusV1Interface {
	return c.extensionsNexusV1
}

// GatewayNexusV1 retrieves the GatewayNexusV1Client
func (c *Clientset) GatewayNexusV1() gatewaynexusv1.GatewayNexusV1Interface {
	return c.gatewayNexusV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.apisNexusV1, err = apisnexusv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.authenticationNexusV1, err = authenticationnexusv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.configNexusV1, err = confignexusv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.connectNexusV1, err = connectnexusv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.extensionsNexusV1, err = extensionsnexusv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.gatewayNexusV1, err = gatewaynexusv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.apisNexusV1 = apisnexusv1.NewForConfigOrDie(c)
	cs.authenticationNexusV1 = authenticationnexusv1.NewForConfigOrDie(c)
	cs.configNexusV1 = confignexusv1.NewForConfigOrDie(c)
	cs.connectNexusV1 = connectnexusv1.NewForConfigOrDie(c)
	cs.extensionsNexusV1 = extensionsnexusv1.NewForConfigOrDie(c)
	cs.gatewayNexusV1 = gatewaynexusv1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.apisNexusV1 = apisnexusv1.New(c)
	cs.authenticationNexusV1 = authenticationnexusv1.New(c)
	cs.configNexusV1 = confignexusv1.New(c)
	cs.connectNexusV1 = connectnexusv1.New(c)
	cs.extensionsNexusV1 = extensionsnexusv1.New(c)
	cs.gatewayNexusV1 = gatewaynexusv1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
