---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx
  namespace: {{.Namespace}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  namespace: {{.Namespace}}
  name: nexus-nginx-admsn-{{.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx
  namespace: {{.Namespace}}
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - ingress-controller-leader
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginx-admsn-{{.Namespace}}
  namespace: {{.Namespace}}
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginx-{{.Namespace}}
  namespace: {{.Namespace}}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginx-admsn-{{.Namespace}}
  namespace: {{.Namespace}}
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx
  namespace: {{.Namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nexus-ingress-nginx
subjects:
- kind: ServiceAccount
  name: nexus-ingress-nginx
  namespace: {{.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginx-admsn-{{.Namespace}}
  namespace: {{.Namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nexus-nginx-admsn-{{.Namespace}}
subjects:
- kind: ServiceAccount
  name: nexus-nginx-admsn-{{.Namespace}}
  namespace: {{.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginx-{{.Namespace}}
  namespace: {{.Namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nexus-nginx-{{.Namespace}}
subjects:
- kind: ServiceAccount
  name: nexus-ingress-nginx
  namespace: {{.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nginx-admsn-{{.Namespace}}
  namespace: {{.Namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nexus-nginx-admsn-{{.Namespace}}
subjects:
- kind: ServiceAccount
  name: nexus-nginx-admsn-{{.Namespace}}
  namespace: {{.Namespace}}
---
apiVersion: v1
data:
  allow-snippet-annotations: "true"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx-controller
  namespace: {{.Namespace}}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx-controller
  namespace: {{.Namespace}}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    component: nexus
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx-controller-admission
  namespace: {{.Namespace}}
spec:
  ports:
  - name: https-webhook
    port: 443
    targetPort: webhook
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    component: nexus
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-ingress-nginx-controller
  namespace: {{.Namespace}}
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      component: nexus
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        component: nexus
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/nexus-ingress-nginx-controller
        - --election-id=ingress-controller-leader
        - --controller-class=k8s.io/ingress-nginx
        - --ingress-class=nginx-{{.Namespace}}
        - --configmap=$(POD_NAMESPACE)/nexus-ingress-nginx-controller
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        - --watch-namespace=$(POD_NAMESPACE)
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        image: gcr.io/nsx-sm/ingress-nginx/controller:v1.2.0
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 8443
          name: webhook
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
        volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: nexus-ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
      - name: webhook-cert
        secret:
          secretName: nexus-nginx-admsn-{{.Namespace}}
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginxw-{{.Namespace}}-create
  namespace: {{.Namespace}}
spec:
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.2.0
        component: nexus
      name: nexus-nginx-admsn-{{.Namespace}}-create
    spec:
      containers:
      - args:
        - create
        - --host=nexus-ingress-nginx-controller-admission,nexus-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
        - --namespace=$(POD_NAMESPACE)
        - --secret-name=nexus-nginx-admsn-{{.Namespace}}
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: gcr.io/nsx-sm/ingress-nginx/kube-webhook-certgen:v1.1.1
        imagePullPolicy: IfNotPresent
        name: create
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: nexus-nginx-admsn-{{.Namespace}}
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginxw-{{.Namespace}}-patch
  namespace: {{.Namespace}}
spec:
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.2.0
      name: nginx-admsn-{{.Namespace}}-patch
    spec:
      containers:
      - args:
        - patch
        - --webhook-name=nexus-nginx-{{.Namespace}}
        - --namespace=$(POD_NAMESPACE)
        - --patch-mutating=false
        - --secret-name=nexus-nginx-admsn-{{.Namespace}}
        - --patch-failure-policy=Fail
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: gcr.io/nsx-sm/ingress-nginx/kube-webhook-certgen:v1.1.1
        imagePullPolicy: IfNotPresent
        name: patch
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: nexus-nginx-admsn-{{.Namespace}}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.2.0
    component: nexus
  name: nexus-nginx-{{.Namespace}}
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: nexus-ingress-nginx-controller-admission
      namespace: {{.Namespace}}
      path: /networking/v1/ingresses
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validate.nginx.ingress.kubernetes.io
  rules:
  - apiGroups:
    - networking.k8s.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingresses
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nexus-k8scert-secret-permission
  namespace: {{.Namespace}}
rules:
- apiGroups:
  - ""
  resources:
  - "secrets"
  verbs:
  - get
  - watch
  - list
  - create
  - delete
  - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nexus-k8scerts-service-account
  namespace: {{.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nexus-k8scert-create-secret-rbac
  namespace: {{.Namespace}}
subjects:
- kind: ServiceAccount
  name: nexus-k8scerts-service-account
roleRef:
  kind: Role
  name: nexus-k8scert-secret-permission
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nexus-k8scert-creation-job
  namespace: {{.Namespace}}
spec:
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
    spec:
      serviceAccountName: nexus-k8scerts-service-account
      containers:
      - name: k8scert-creation
        image: "gcr.io/nsx-sm/tools:latest"
        imagePullPolicy: IfNotPresent
        command:
        - "/bin/bash"
        - "-c"
        - |
          set -e
          openssl rand -out /root/.rnd -hex 256
          openssl genrsa -out /tmp/ca.key 2048
          openssl req -x509 -new -nodes -key /tmp/ca.key -subj "/CN=nexus-apiserver" -days 10000 -out /tmp/ca.crt
          kubectl create secret generic nexus-customapi-ca --from-file=/tmp/ca.key --from-file=/tmp/ca.crt -n $KUBERNETES_POD_NAMESPACE --dry-run -o yaml | kubectl apply -f -
        env:
          - name: KUBERNETES_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
      restartPolicy: Never
  backoffLimit: 4
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-kube-apiserver
  namespace: {{.Namespace}}
  labels:
    app: nexus-kube-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nexus-kube-apiserver
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        app: nexus-kube-apiserver
    spec:
      initContainers:
      - name: check-etcd-server
        image: "gcr.io/nsx-sm/tools:latest"
        imagePullPolicy: IfNotPresent
        command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              URL="http://etcd:2379/health"
              max_retries=20
              counter=0
              while [[ $counter -lt $max_retries ]]; do
                    status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                    if [ $status == "200" ]; then
                        echo "$URL is reachable"
                        exit 0
                    else
                        counter=$((counter +1))
                        sleep 5
                        if [[ $counter -eq $max_retries ]]; then
                          exit 1
                        fi
                    fi
              done
      containers:
      - command:
        - kube-apiserver
        - --insecure-bind-address=0.0.0.0
        - --etcd-servers=http://etcd:2379
        - --service-account-key-file=/custom/k8s/certs/ca.crt
        - --service-cluster-ip-range=10.24.0.0/16
        - --cert-dir=/etc/kubernetes/certs
        - --endpoint-reconciler-type=none
        - --port=8080
        image: gcr.io/nsx-sm/k8s.gcr.io/kube-apiserver:v1.18.0
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8080
        env:
        - name: KUBERNETES_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        name: kube-apiserver
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        volumeMounts:
            - name: nexus-customapi-ca
              mountPath: "/custom/k8s/certs"
              readOnly: true
      restartPolicy: Always
      securityContext: {}
      volumes:
      - name: nexus-customapi-ca
        secret:
            secretName: nexus-customapi-ca
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-apiserver
  namespace: {{.Namespace}}
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      name: http
      port: 8080
      targetPort: 8080
    - protocol: TCP
      port: 6443
      name: https
      targetPort: 6443
  selector:
      app: nexus-kube-apiserver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-kube-controllermanager
  namespace: {{.Namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: nexus-kube-controllermanager
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        name: nexus-kube-controllermanager
    spec:
      initContainers:
      - name: check-etcd-server
        image: "gcr.io/nsx-sm/tools:latest"
        imagePullPolicy: IfNotPresent
        command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              URL="http://nexus-apiserver:8080/version"
              max_retries=20
              counter=0
              while [[ $counter -lt $max_retries ]]; do
                    status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                    if [ $status == "200" ]; then
                        echo "$URL is reachable"
                        exit 0
                    else
                        counter=$((counter +1))
                        sleep 5
                        if [[ $counter -eq $max_retries ]]; then
                          exit 1
                        fi
                    fi
              done
      containers:
      - command:
        - kube-controller-manager
        - --service-account-private-key-file=/custom/k8s/certs/ca.key
        - --leader-elect=false
        - --master=nexus-apiserver:8080
        - --use-service-account-credentials=true
        - --authentication-skip-lookup=true
        image: gcr.io/nsx-sm/k8s.gcr.io/kube-controller-manager:v1.18.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 10257
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        name: kube-controllermanager
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
            - name: nexus-customapi-ca
              mountPath: "/custom/k8s/certs"
              readOnly: true
      restartPolicy: Always
      securityContext: {}
      volumes:
      - name: nexus-customapi-ca
        secret:
            secretName: nexus-customapi-ca
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-proxy-container
  namespace: {{.Namespace}}
  labels:
    app: nexus-proxy-container
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nexus-proxy-container
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        app: nexus-proxy-container
    spec:
      containers:
      - name: proxy-container
        image: "gcr.io/nsx-sm/tools:latest"
        command: [ "kubectl","--server=http://nexus-apiserver:8080","proxy","--address=0.0.0.0","--disable-filter=true","--v=1" ]
        ports:
          - containerPort: 8001
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
        imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-proxy-container
  namespace: {{.Namespace}}
spec:
  ports:
    - protocol: TCP
      name: http
      port: 80
      targetPort: 8001
  selector:
      app: nexus-proxy-container
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nexus-nginx
  namespace: {{.Namespace}}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nexus-nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nexus-nginx
      annotations:
        "sidecar.istio.io/inject": "false"
    spec:
      containers:
      - name: nginx
        image: "gcr.io/nsx-sm/nginx:latest"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-nginx
  namespace: {{.Namespace}}
  labels:
    app: nexus-nginx
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nexus-nginx
  type: ClusterIP
