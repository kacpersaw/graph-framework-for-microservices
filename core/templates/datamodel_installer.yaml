apiVersion: v1
kind: ConfigMap
metadata:
  name: dmi-kubeconfig
  namespace: {{.Values.global.namespace}}
data:
  kubeconfig: |
    current-context: nexus-api-server
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        api-version: v1
        server: http://nexus-apiserver:8080
        insecure-skip-tls-verify: true
      name: nexus-api-server
    contexts:
    - context:
        cluster: nexus-api-server
      name: nexus-api-server
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dmi-script
  namespace: {{.Values.global.namespace}}
data:
  create_datamodel_cm.sh: |
      set -ex
      NAME=${NAME:-}
      IMAGE="file://${NAME}"
      TITLE=${TITLE:-}
      SKIP_CRD_INSTALLATION=${SKIP_CRD_INSTALLATION:-false}
      if [[ $SKIP_CRD_INSTALLATION == "false" ]]; then
          kubectl apply -f /crds --recursive
          NAME=$(cat /NAME)
          IMAGE=$(cat /IMAGE)
      fi
      if [[ -n $NAME ]] && [[ -n $IMAGE ]]; then
        if [[ -n $TITLE ]]; then
          echo '
            apiVersion: nexus.org/v1
            kind: Datamodel
            metadata:
              name: '"$NAME"'
            spec:
              name: '"$NAME"'
              url: '"$IMAGE"'
              title: '"$TITLE"'' | kubectl apply -f -
        else
          echo '
          apiVersion: nexus.org/v1
          kind: Datamodel
          metadata:
            name: '"$NAME"'
          spec:
            name: '"$NAME"'
            url: '"$IMAGE"'' | kubectl apply -f -
        fi
      fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: datamodel-job-spec
  namespace: {{.Values.global.namespace}}
data:
    jobSpec.yaml: |
      ---
      {{`{{if eq .SkipCRDInstallation "false"}}`}}
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: nexus-graphql-kubeconfig
        namespace: {{.Values.global.namespace}}
      data:
        kubeconfig: |
          current-context: localapiserver
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              api-version: v1
              server: http://nexus-apiserver:8080
              insecure-skip-tls-verify: true
            name: localapiserver
          contexts:
          - context:
              cluster: localapiserver
            name: localapiserver
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: graphql-server
        namespace: {{.Values.global.namespace}}
        labels:
          control-plane: graphql
      spec:
        selector:
          matchLabels:
            control-plane: graphql
        replicas: 0
        template:
          metadata:
            annotations:
              kubectl.kubernetes.io/default-container: graphql
            labels:
              control-plane: graphql
          spec:
            initContainers:
              - name: extract-plugin
                imagePullPolicy: IfNotPresent
                image: {{`{{.DatamodelInstaller.Image}}`}}
                command:
                  - /bin/bash
                  - -c
                  - |
                    #!/bin/bash
                    cp /build/graphql.so /tmp/plugin
                volumeMounts:
                  - mountPath: /tmp/plugin
                    name: graphql-plugin
              - name: check-nexus-proxy-container
                image: "gcr.io/mesh7-public-images/tools:latest"
                command:
                  - /bin/bash
                  - -c
                  - |
                    #!/bin/bash
                    set -x
                    URL="http://nexus-apiserver:8080/api/v1/namespaces"
                    max_retries=20
                    counter=0
                    while [[ $counter -lt $max_retries ]]; do
                          status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                          if [ $status == "200" ]; then
                              echo "$URL is reachable"
                              exit 0
                          else
                              counter=$((counter +1))
                              sleep 5
                          fi
                    done
              - name: create-backend-route-object
                image: "gcr.io/mesh7-public-images/tools:latest"
                imagePullPolicy: IfNotPresent
                command:
                  - /bin/bash
                  - -c 
                  - |
                    #!/bin/bash
                    set -x
                    echo "Creating custom route object"
                    echo 'apiVersion: route.nexus.org/v1
                    kind: Route
                    metadata:
                      name: graphql
                    spec:
                      service:
                        Name: graphql
                        Port: 8080
                        Scheme: Http
                      resource:
                        Name: graphql
                      uri: "/*"' | kubectl -s nexus-api-gw:80 apply -f -
            containers:
              -
                image: {{.Values.global.registry}}/graphql-server:{{ required "Please provide global.graphql.tag value using --set-string option!" .Values.global.graphql.tag }}
                name: graphql
                env:
                  - name: KUBECONFIG
                    value: /kubeconfig/kubeconfig
                  - name: PLUGIN_PATH
                    value: /tmp/plugin/graphql.so
                  - name: NAMESPACE
                    valueFrom:
                      fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
                imagePullPolicy: IfNotPresent
                securityContext:
                  allowPrivilegeEscalation: false
                # TODO(user): Configure the resources accordingly based on the project requirements.
                # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                volumeMounts:
                  - mountPath: /kubeconfig
                    name: nexus-kubeconfig
                  - mountPath: /tmp/plugin
                    name: graphql-plugin
            volumes:
              - name: nexus-kubeconfig
                configMap:
                  name: nexus-graphql-kubeconfig
              - name: graphql-plugin
                emptyDir: {}
            {{`{{- if .IsImagePullSecret }}`}}
            imagePullSecrets:
              - name: {{`{{.ImagePullSecret}}`}}
            {{`{{- end }}`}}
            terminationGracePeriodSeconds: 10
            securityContext:
              runAsUser: 0
              runAsGroup: 0
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: graphql
        namespace: {{.Values.global.namespace}}
      spec:
        ports:
        - protocol: TCP
          name: http
          port: 8080
          targetPort: 8080
        selector:
          control-plane: graphql
      {{`{{- end }}`}}
      ---
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: {{`{{.DatamodelInstaller.Name}}`}}-dmi
        spec:
          backoffLimit: 6
          template:
            metadata:
              annotations:
                "sidecar.istio.io/inject": "false"
            spec:
              initContainers:
                - name: check-nexus-proxy-container
                  image: "gcr.io/nsx-sm/tools:latest"
                  imagePullPolicy: IfNotPresent
                  command:
                    - /bin/bash
                    - -c
                    - |
                      #!/bin/bash
                      set -x
                      URL="http://nexus-apiserver:8080/api/v1/namespaces"
                      max_retries=60
                      counter=0
                      while [[ $counter -lt $max_retries ]]; do
                            status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                            if [ $status == "200" ]; then
                                echo "$URL is reachable"
                                exit 0
                            else
                                counter=$((counter +1))
                                sleep 3
                                if [[ $counter -eq $max_retries ]]; then
                                  exit 1
                                fi
                            fi
                      done
              containers:
                - command:
                    - /bin/bash
                    - -c
                    - opt/datamodel-installer-job-cm/create_datamodel_cm.sh
                  env:
                    - name: KUBECONFIG
                      value: /etc/config/kubeconfig
                    - name: NAME
                      value: {{`{{.DatamodelInstaller.Name}}`}}
                    - name: IMAGE
                      value: {{`{{.DatamodelInstaller.Image}}`}}
                    - name: SKIP_CRD_INSTALLATION
                      value: {{`"{{.SkipCRDInstallation}}"`}}
                    {{`{{if .DatamodelTitle}}`}}
                    - name: TITLE
                      value: {{`"{{.DatamodelTitle}}"`}}
                    {{`{{end}}`}}
                  image: {{`{{.DatamodelInstaller.Image}}`}}
                  imagePullPolicy: IfNotPresent
                  name: datamodel-installer-job
                  volumeMounts:
                    - mountPath: /opt/datamodel-installer-job-cm/
                      name: dmi-script
                      readOnly: false
                    - mountPath: /etc/config
                      name: dmi-kubeconfig
                      readOnly: false
              restartPolicy: Never
              volumes:
                - configMap:
                    name: dmi-script
                    defaultMode: 0555
                  name: dmi-script
                - configMap:
                    name: dmi-kubeconfig
                    defaultMode: 0555
                  name: dmi-kubeconfig
              {{`{{- if .IsImagePullSecret }}`}}
              imagePullSecrets:
                - name: {{`{{.ImagePullSecret}}`}}
              {{`{{- end }}`}}